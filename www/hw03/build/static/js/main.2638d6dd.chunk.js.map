{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","secret","setSecret","guesses","setGuesses","text","setText","lives","setLives","message","setMessage","guess","ev","valid_guess","includes","valid_guess_digit","Set","used_digits","length","i","has","add","validateGuess","ng","concat","console","log","check_game_over","alert","reset","setVal","val","digitSet","digit","Math","floor","random","getResult","guess_text","split","actual_text","wrong_place","correct_place","GameOver","onClick","useEffect","body","type","onKeyPress","key","onChange","target","value","className","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2638d6dd.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [secret, setSecret] = useState(1234);\n  const [guesses, setGuesses] = useState([]);\n  const [text, setText] = useState(\"\");\n  const [lives, setLives] = useState(8);\n  const [message, setMessage] = useState(\"Game over, you lost\")\n\n  // called each time the user guesses to check if they won or \n  // ran out of lives\n  function check_game_over(text) {\n    if (text == secret) {\n      setMessage(\"You Won!\");\n      setLives(0);\n    } else {\n      setLives(lives - 1);\n    }\n  }\n\n  // called when a user hits enter or selects the guess button\n  // first validates the guess and then adds it to guess list\n  function guess(ev) {\n    let valid_guess = validateGuess(text);\n    setText(\"\");\n    if (valid_guess) {\n      let ng = guesses.concat(text);\n      console.log(\"ng\", ng);\n      setGuesses(ng);\n      check_game_over(text);\n    } else {\n      console.log(\"invalid guess\");\n      alert(\"Guesses must be composed of 4 unigue digits and be unique from previous guesses.\");\n    }\n  }\n\n  // ensures that a guess is 4 unique digits and has not been\n  // already guessed\n  function validateGuess(guess) {\n    if (guesses.includes(guess)){\n      return false;\n    }\n    let valid_guess_digit = new Set([\n      \"0\",\n      \"1\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n      \"9\",\n    ]);\n    let used_digits = new Set();\n    if (guess.length == 4) {\n      for (let i = 0; i < guess.length; i++) {\n        if (valid_guess_digit.has(guess[i]) && !used_digits.has(guess[i])) {\n          used_digits.add(guess[i]);\n        } else {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  function keyPress(ev) {\n    if (ev.key == \"Enter\") {\n      guess(ev);\n    }\n  }\n\n  function updateText(ev) {\n    setText(ev.target.value);\n    console.log(text);\n  }\n\n  // resets the game back to an initial state\n  function reset() {\n    setVal();\n    setGuesses([]);\n    setLives(8);\n    setMessage(\"Game over, you lost\")\n  }\n\n  function setVal() {\n    let val = \"\";\n    let digitSet = new Set();\n    while (val.length < 4) {\n      let digit = Math.floor(Math.random() * 10);\n      if (!digitSet.has(digit)) {\n        digitSet.add(digit);\n        val = val + digit;\n      }\n    }\n\n    setSecret(val);\n    console.log(val);\n  }\n\n  // calculates the \"bulls\" and \"cows\" for a guess\n  function getResult(text) {\n    let guess_text = text.split(\"\");\n    let actual_text = secret.split(\"\");\n\n    var i;\n    let wrong_place = 0;\n    let correct_place = 0;\n    for (i = 0; i < 4; i++) {\n      if (guess_text[i] == actual_text[i]) {\n        correct_place += 1;\n      } else if (actual_text.includes(guess_text[i])) {\n        console.log(\"in else\");\n        console.log(guess_text[i]);\n        console.log(actual_text);\n        wrong_place += 1;\n      }\n    }\n    return correct_place + \" bulls; \" + wrong_place + \" cows\";\n  }\n\n  useEffect(() => {\n    setVal();\n  }, []);\n\n  // the screen that is displayed when a game is over\n  function GameOver() {\n    return (\n      <div>\n        <p>\n          {message}\n        </p>\n        <button onClick={reset}>Reset Game</button>\n      </div>\n    );\n  }\n\n  let body = null;\n\n  if (lives > 0) {\n    body = (\n      <div>\n        <h2>{lives} Lives left!</h2>\n        <input\n          type=\"text\"\n          onKeyPress={keyPress}\n          onChange={updateText}\n          value={text}\n        />\n        <button className=\"guess-button\" onClick={guess}>\n          Guess\n        </button>\n        <br />\n        <br />\n        <button onClick={reset}>Reset Game</button>\n        <p>Guesses</p>\n        <ol>\n          {guesses.map((value, index) => {\n            return <li key={index}>{value + \" \" + getResult(value)}</li>;\n          })}\n        </ol>\n      </div>\n    );\n  }\n  else {\n    body = (\n      <div>\n        <GameOver/>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>4 digits</h1>\n      {body}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}